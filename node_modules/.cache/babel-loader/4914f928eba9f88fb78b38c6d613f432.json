{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/brandon/Documents/Projects/Website/react-gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/brandon/Documents/Projects/Website/react-gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/brandon/Documents/Projects/Website/react-gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/brandon/Documents/Projects/Website/react-gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Vector_1 = require(\"./Particle/Vector\");\n\nvar Vector3d_1 = require(\"./Particle/Vector3d\");\n\nvar Particle = /*#__PURE__*/function () {\n  function Particle(id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    this.maxDistance = {};\n    var pxRatio = container.retina.pixelRatio;\n    var options = container.actualOptions;\n    var particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    var shapeType = particlesOptions.shape.type;\n    var reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    var zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    var color = this.options.color;\n    var sizeOptions = this.options.size;\n    var sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    var sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      var sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.getRangeMin(sizeRange);\n      this.size.max = Utils_1.getRangeMax(sizeRange);\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    var rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    var rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      var index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    var rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    var tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    var tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      var _index = Math.floor(Math.random() * 2);\n\n      tiltDirection = _index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    var tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    var orbitOptions = particlesOptions.orbit;\n\n    if (orbitOptions.enable) {\n      this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n      this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n    }\n\n    var hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      var colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    var rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n          this.alterValue = this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n        } else if (rollOpt.darken.enable) {\n          this.alterType = Enums_1.AlterType.darken;\n          this.alterValue = rollOpt.darken.value;\n        } else if (rollOpt.enlighten.enable) {\n          this.alterType = Enums_1.AlterType.enlighten;\n          this.alterValue = rollOpt.enlighten.value;\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    var wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(this.container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    var particles = this.container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    var opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getValue(opacityOptions)\n    };\n    var opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      var opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    var strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      var strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    var _iterator = _createForOfIteratorHelper(container.plugins),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n\n        if (plugin.particleCreated) {\n          plugin.particleCreated(this);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(Particle, [{\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      return this.bubble.radius || this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      var radius = this.getRadius();\n      return Math.pow(radius, 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      if (this.bubble.color) {\n        return this.bubble.color;\n      }\n\n      var color = Utils_1.getHslFromAnimation(this.color);\n\n      if (color && (this.backColor || this.alterType && this.alterValue !== undefined)) {\n        var rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          } else if (this.alterType && this.alterValue !== undefined) {\n            return {\n              h: color.h,\n              s: color.s,\n              l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue\n            };\n          }\n        }\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      if (this.unbreakable) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      var _iterator3 = _createForOfIteratorHelper(this.container.plugins),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              plugin = _step3$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      if (override) {\n        return;\n      }\n\n      var destroyOptions = this.options.destroy;\n\n      if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.loops.opacity = 0;\n      this.loops.size = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n\n      var rate = Utils_1.getRangeValue(splitOptions.rate.value);\n\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"setColorAnimation\",\n    value: function setColorAnimation(colorAnimation, colorValue) {\n      if (colorAnimation.enable) {\n        colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n        if (colorAnimation.sync) {\n          return;\n        }\n\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.velocity *= Math.random();\n\n        if (colorValue.value) {\n          colorValue.value *= Math.random();\n        }\n      } else {\n        colorValue.velocity = 0;\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var _a, _b;\n\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var canvasSize = container.canvas.size;\n      var pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n      var outMode = this.options.move.outMode;\n\n      if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - this.size.value * 2) {\n          pos.x -= this.size.value;\n        } else if (pos.x < this.size.value * 2) {\n          pos.x += this.size.value;\n        }\n      }\n\n      if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - this.size.value * 2) {\n          pos.y -= this.size.value;\n        } else if (pos.y < this.size.value * 2) {\n          pos.y += this.size.value;\n        }\n      }\n\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var overlapOptions = this.options.collisions.overlap;\n\n      if (!overlapOptions.enable) {\n        var retries = overlapOptions.retries;\n\n        if (retries >= 0 && tryCount > retries) {\n          throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n\n        var overlaps = false;\n\n        var _iterator5 = _createForOfIteratorHelper(this.container.particles.array),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var particle = _step5.value;\n\n            if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n              overlaps = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        return overlaps;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n      var rad = Math.PI / 180 * moveOptions.angle.value;\n      var radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      var range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n\n      if (!moveOptions.straight) {\n        res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n      }\n\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= Math.random();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadShapeData\",\n    value: function loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n\n      if (shapeData) {\n        return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n  }, {\n    key: \"loadLife\",\n    value: function loadLife() {\n      var container = this.container;\n      var particlesOptions = this.options;\n      var lifeOptions = particlesOptions.life;\n      var life = {\n        delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: particlesOptions.life.count\n      };\n\n      if (life.duration <= 0) {\n        life.duration = -1;\n      }\n\n      if (life.count <= 0) {\n        life.count = -1;\n      }\n\n      return life;\n    }\n  }]);\n\n  return Particle;\n}();\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/brandon/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","maxDistance","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","zIndexValue","getRangeValue","zIndex","pathDelay","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","orbitOptions","orbit","orbitRotation","rotation","orbitColor","colorToHsl","hslColor","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","alterType","AlterType","alterValue","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","life","loadLife","spawning","shadowColor","colorToRgb","shadow","particleInit","plugins","plugin","particleCreated","delta","canvas","drawParticlePlugin","drawParticle","x","y","radius","getRadius","pow","getHslFromAnimation","rolled","override","particleDestroyed","destroyOptions","destroy","mode","DestroyMode","split","splitOptions","count","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","Vector3d","create","canvasSize","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","array","particle","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","angle","radOffset","range","left","right","straight","length","deepExtend","lifeOptions","delayTime","duration","time"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        this.maxDistance = {};\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n        this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.getRangeMin(sizeRange);\n            this.size.max = Utils_1.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const orbitOptions = particlesOptions.orbit;\n        if (orbitOptions.enable) {\n            this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n            this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n        }\n        const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                    this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n                    this.alterValue =\n                        this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n                }\n                else if (rollOpt.darken.enable) {\n                    this.alterType = Enums_1.AlterType.darken;\n                    this.alterValue = rollOpt.darken.value;\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.alterType = Enums_1.AlterType.enlighten;\n                    this.alterValue = rollOpt.enlighten.value;\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(this.container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = this.container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.getRangeMax(opacityOptions.value),\n            min: Utils_1.getRangeMin(opacityOptions.value),\n            value: Utils_1.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        const color = Utils_1.getHslFromAnimation(this.color);\n        if (color && (this.backColor || (this.alterType && this.alterValue !== undefined))) {\n            const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                else if (this.alterType && this.alterValue !== undefined) {\n                    return {\n                        h: color.h,\n                        s: color.s,\n                        l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue,\n                    };\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}